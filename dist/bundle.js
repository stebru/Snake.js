(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tileProtoJs = require('./tileProto.js');

var _tileProtoJs2 = _interopRequireDefault(_tileProtoJs);

var _snakeProtoJs = require('./snakeProto.js');

var _snakeProtoJs2 = _interopRequireDefault(_snakeProtoJs);

var _settingsJs = require('./settings.js');

var _settingsJs2 = _interopRequireDefault(_settingsJs);

var boardProto = {

  getTileAt: function getTileAt(row, col) {
    var rowObj = this.rows[row];
    return rowObj.tiles[col];
  },

  addFruit: function addFruit() {

    var isTileOccupied = true;
    do {
      var rndRow = Math.floor(Math.random() * this.numRows);
      var rndCol = Math.floor(Math.random() * this.numCols);
      var tile = this.getTileAt(rndRow, rndCol);
      isTileOccupied = !!tile.occupiedBy;
    } while (isTileOccupied);

    tile.addFruit();
  },

  createMatrix: function createMatrix(boardElement) {

    this.rows = [];
    this.fragment = document.createDocumentFragment();
    var row, col;

    for (var i = 0; i < this.numRows; i++) {
      row = document.createElement('div');
      row.classList.add('row');

      var rowObj = Object.create(null);
      rowObj.index = i;
      rowObj.tiles = [];

      for (var j = 0; j < this.numCols; j++) {
        col = document.createElement('div');
        col.classList.add('col');
        row.appendChild(col);

        var tile = Object.create(_tileProtoJs2['default']);
        tile.index = j;
        tile.row = i;
        tile.col = j;
        tile.occupiedBy = null;

        tile.element = col;
        rowObj.tiles.push(tile);
      }
      this.rows.push(rowObj);
      this.fragment.appendChild(row);
    }
    boardElement.appendChild(this.fragment);
  },

  createSnake: function createSnake() {
    var directions = _settingsJs2['default'].directions;
    var snake = Object.create(_snakeProtoJs2['default']);

    snake.direction = directions.RIGHT;
    snake.bodyParts = [];

    var head = Object.create({});
    head.isHead = true;
    head.tile = this.rows[4].tiles[5].addSnakePart(head);
    snake.bodyParts.push(head);

    var body = Object.create({});
    body.tile = this.rows[4].tiles[4].addSnakePart(body);
    snake.bodyParts.push(body);

    var body = Object.create({});
    body.tile = this.rows[4].tiles[3].addSnakePart(body);
    snake.bodyParts.push(body);

    this.snake = snake;
  },

  clear: function clear(game) {
    this.snake = null;
    game.boardElement.innerHTML = null;
    game.scoreElement.innerHTML = '0';
  },

  draw: function draw(snake) {
    var snakeHead = this.snake.getHead();
    var moveToRow, moveToCol;
    var directions = _settingsJs2['default'].directions;

    switch (this.snake.direction) {
      case directions.UP:
        moveToRow = snakeHead.tile.row - 1;
        moveToCol = snakeHead.tile.col;
        break;
      case directions.DOWN:
        moveToRow = snakeHead.tile.row + 1;
        moveToCol = snakeHead.tile.col;
        break;
      case directions.RIGHT:
        moveToRow = snakeHead.tile.row;
        moveToCol = snakeHead.tile.col + 1;
        break;
      case directions.LEFT:
        moveToRow = snakeHead.tile.row;
        moveToCol = snakeHead.tile.col - 1;
        break;
    }

    if (moveToRow < 0) {
      moveToRow = this.numRows - 1;
    } else if (moveToRow > this.numRows - 1) {
      moveToRow = 0;
    } else if (moveToCol > this.numRows - 1) {
      moveToCol = 0;
    } else if (moveToCol < 0) {
      moveToCol = this.numRows - 1;
    }

    var moveToTile = this.getTileAt(moveToRow, moveToCol);

    for (var b = 0; b < this.snake.bodyParts.length; b++) {

      var currentBodyPart = this.snake.bodyParts[b];
      var prevTile = currentBodyPart.tile;

      currentBodyPart.tile = moveToTile.addSnakePart(currentBodyPart);
      if (currentBodyPart.tile === false) {
        break;
      }
      prevTile.removeSnakePart();
      moveToTile = prevTile;
    }
  }
};

exports['default'] = boardProto;
module.exports = exports['default'];

},{"./settings.js":4,"./snakeProto.js":5,"./tileProto.js":6}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _boardProtoJs = require('./boardProto.js');

var _boardProtoJs2 = _interopRequireDefault(_boardProtoJs);

var _settingsJs = require('./settings.js');

var _settingsJs2 = _interopRequireDefault(_settingsJs);

var game = Object.create({
  updateScore: function updateScore() {
    this.score += this.nextScore;
    this.scoreElement.innerHTML = this.score;
    this.speed -= 1;
    this.nextScore += 5;
  },

  resetScore: function resetScore() {
    this.score = 0;
    this.scoreElement.innerHTML = this.score;
  },

  gameOver: function gameOver() {
    window.cancelAnimationFrame(this.raf);
  },

  start: function start() {
    this.boardElement = document.getElementById('board');
    this.scoreElement = document.getElementById('score');

    if (this.board) {
      this.board.clear(this);
    }

    this.gameOver();
    this.resetScore();

    this.board = Object.create(_boardProtoJs2['default']);
    this.board.numRows = 20;
    this.board.numCols = 20;
    this.board.createMatrix(this.boardElement);

    this.board.createSnake();
    this.board.addFruit();

    this.score = 0;
    this.speed = 100;
    this.lastTick = 0;
    this.nextScore = 10;

    this.listen();

    window.requestAnimationFrame(this.run.bind(this));
  },

  listen: function listen() {
    if (this.listener) {
      document.removeEventListener('keydown', this.listener);
    }
    this.listener = this.keys.bind(this);
    document.addEventListener('keydown', this.listener);
  },

  keys: function keys(event) {

    var snake = this.board.snake,
        keycodes = _settingsJs2['default'].keycodes,
        directions = _settingsJs2['default'].directions;

    if (event.keyCode === keycodes.UP && snake.direction !== directions.DOWN) {
      snake.direction = directions.UP;
    } else if (event.keyCode === keycodes.DOWN && snake.direction !== directions.UP) {
      snake.direction = directions.DOWN;
    } else if (event.keyCode === keycodes.RIGHT && snake.direction !== directions.LEFT) {
      snake.direction = directions.RIGHT;
    } else if (event.keyCode === keycodes.LEFT && snake.direction !== directions.RIGHT) {
      snake.direction = directions.LEFT;
    }

    if (event.keyCode === keycodes.SPACE) {
      game.start();
    }
  },

  run: function run(timestamp) {
    this.raf = window.requestAnimationFrame(this.run.bind(this));

    if (timestamp - this.lastTick < this.speed) {
      return false;
    }
    this.lastTick = timestamp;

    this.board.draw();
  }
});

exports['default'] = game;
module.exports = exports['default'];

},{"./boardProto.js":1,"./settings.js":4}],3:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _gameJs = require('./game.js');

var _gameJs2 = _interopRequireDefault(_gameJs);

_gameJs2['default'].start();

},{"./game.js":2}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var directions = {
	UP: 1,
	DOWN: 2,
	LEFT: 4,
	RIGHT: 8
};

var keycodes = {
	UP: 38,
	DOWN: 40,
	RIGHT: 39,
	LEFT: 37,
	SPACE: 32
};

exports["default"] = {
	directions: directions,
	keycodes: keycodes
};
module.exports = exports["default"];

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var snakeProto = {
	getLength: function getLength() {
		return this.bodyParts.length;
	},

	getHead: function getHead() {
		return this.bodyParts[0];
	},

	getTail: function getTail() {
		return this.bodyParts[this.bodyParts.length - 1];
	}
};

exports["default"] = snakeProto;
module.exports = exports["default"];

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _gameJs = require('./game.js');

var _gameJs2 = _interopRequireDefault(_gameJs);

var tileProto = {
  paintSnakePart: function paintSnakePart() {
    this.element.classList.add('on');
    if (this.occupiedBy.isHead) {
      this.element.classList.add('head');
    }
  },

  clearTile: function clearTile() {
    this.element.classList.remove('on', 'head');
  },

  addSnakePart: function addSnakePart(snakePart) {
    if (this.hasFruit) {
      this.removeFruit();
      _gameJs2['default'].updateScore();
      var body = Object.create({});
      var tailTile = _gameJs2['default'].board.snake.bodyParts[_gameJs2['default'].board.snake.bodyParts.length - 1].tile;
      body.tile = tailTile.addSnakePart(body);
      _gameJs2['default'].board.snake.bodyParts.push(body);
      _gameJs2['default'].board.addFruit();
    } else if (snakePart.isHead && this.occupiedBy) {
      _gameJs2['default'].gameOver();
      return false;
    }
    this.occupiedBy = snakePart;
    snakePart.tile = this;
    this.paintSnakePart();
    return this;
  },

  removeSnakePart: function removeSnakePart() {
    this.occupiedBy = null;
    this.clearTile();
    return this;
  },

  hasSnakePart: function hasSnakePart() {
    return this.occupiedBy != null;
  },

  addFruit: function addFruit() {
    this.hasFruit = true;
    this.paintFruit();
  },

  removeFruit: function removeFruit() {
    this.hasFruit = false;
    this.element.classList.remove('fruit');
  },

  paintFruit: function paintFruit() {
    this.element.classList.add('fruit');
  }
};

exports['default'] = tileProto;
module.exports = exports['default'];

},{"./game.js":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
